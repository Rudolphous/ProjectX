import java.util.Arrays;

public class Main implements Printer {

    private PolygonGenerator generator;
    private double minArea = Double.MAX_VALUE;
    private double maxArea = 0.0;
    private int pointcounter = 0;

    @Override
    public void solution(Point[] solution) {
        int area = generator.getArea();

        if (area > maxArea) {
            maxArea = area;
            System.out.println("\nmax(" + solution.length + "):" + toString(solution) + "=" + maxArea / 2);
        }
        if (area < minArea) {
            minArea = area;
            System.out.println("\nmin(" + solution.length + "):" + toString(solution) + "=" + minArea / 2);
        }
    }

    private static String toString(Point[] solution) {
        return Arrays.toString(solution);
    }

    public static void main(String args[]) throws Exception {
        Main main = new Main();
        long start = System.nanoTime();
        main.doit();
        long duration = System.nanoTime() - start;
        System.out.println("duration: " + (double) duration / 1000000);
    }

    private void doit() {
        generator = new PolygonGenerator(473);
        String s = "(3,453), (454,461), (2,451), (423,460), (455,459), (1,448), (449,458), (457,455), (437,456), (456,454), (435,452), (450,450), (436,445), (416,444), (439,436), (8,421), (438,435), (405,433), (427,428), (318,429), (409,425), (408,409), (7,412), (4,438), (9,6), (6,284), (5,411), (269,410), (313,321), (246,305), (256,266), (241,273), (194,262), (212,287), (181,244), (216,311), (178,240), (139,198), (195,258), (210,239), (196,200), (124,196), (183,199), (141,177), (134,135), (123,131), (126,132), (133,134), (136,129), (135,136), (140,169), (143,146), (149,133), (157,105), (142,114), (138,119), (150,126), (108,130), (137,156), (118,140), (132,172), (109,170), (128,171), (115,137), (75,125), (113,88), (81,106), (43,138), (38,94), (17,100), (29,95), (11,75), (30,96), (44,67), (36,62), (10,29), (21,31), (32,27), (16,18), (26,25), (13,26), (24,24), (18,23), (15,16), (25,22), (19,15), (12,11), (20,14), (22,17), (31,10), (23,19), (40,21), (27,20), (33,28), (14,33), (28,50), (45,43), (54,32), (41,38), (34,37), (60,13), (37,35), (49,34), (77,12), (55,30), (52,41), (66,47), (58,40), (69,49), (50,42), (35,53), (64,68), (87,54), (74,45), (61,39), (73,44), (76,46), (99,51), (82,48), (97,56), (94,59), (101,55), (90,63), (104,66), (103,58), (102,36), (105,65), (98,74), (100,71), (93,64), (85,69), (92,77), (88,86), (106,81), (96,84), (86,89), (91,76), (84,70), (95,57), (89,52), (72,73), (83,80), (63,99), (70,91), (53,104), (59,78), (56,93), (57,98), (62,97), (79,83), (80,79), (48,60), (46,92), (47,61), (39,82), (42,118), (68,113), (51,107), (67,112), (65,101), (71,111), (114,87), (116,109), (129,72), (119,103), (130,121), (122,108), (117,110), (127,122), (121,123), (125,120), (112,117), (120,115), (110,102), (111,90), (78,124), (107,128), (131,127), (163,85), (154,116), (147,141), (156,145), (158,160), (155,147), (146,142), (148,151), (153,163), (145,144), (144,162), (151,173), (164,165), (159,164), (166,152), (161,158), (167,150), (162,161), (165,159), (170,155), (177,139), (173,168), (172,181), (174,154), (175,148), (169,166), (176,143), (160,176), (171,184), (184,186), (189,188), (186,180), (179,149), (185,174), (188,185), (182,153), (187,179), (191,193), (180,187), (152,178), (168,191), (190,197), (198,167), (201,157), (192,194), (197,201), (193,192), (199,205), (206,204), (205,195), (202,175), (207,203), (215,189), (208,202), (231,182), (200,210), (225,208), (209,206), (230,207), (226,218), (228,219), (233,228), (236,221), (240,190), (237,215), (247,183), (238,212), (235,226), (254,251), (252,246), (243,227), (257,237), (244,229), (258,255), (232,232), (249,245), (242,236), (227,223), (224,211), (220,224), (222,213), (217,209), (203,214), (211,241), (218,217), (214,234), (219,222), (213,238), (204,263), (250,268), (263,259), (245,254), (234,260), (221,264), (239,256), (223,261), (248,253), (229,243), (259,257), (266,247), (251,225), (255,230), (253,216), (267,249), (274,231), (262,265), (278,272), (301,278), (294,252), (285,235), (286,250), (284,233), (292,242), (299,269), (295,248), (300,271), (293,220), (302,282), (287,290), (291,297), (277,300), (288,293), (279,298), (276,292), (272,289), (280,291), (281,294), (290,286), (297,280), (282,285), (268,274), (273,296), (265,270), (283,283), (298,279), (275,276), (289,277), (260,267), (261,301), (270,308), (303,309), (264,299), (296,306), (309,303), (306,281), (307,302), (305,275), (310,304), (321,288), (308,307), (319,295), (304,312), (320,315), (326,310), (324,319), (315,318), (323,317), (311,316), (317,327), (327,326), (325,330), (316,328), (329,333), (328,313), (331,332), (332,346), (339,341), (336,331), (335,339), (330,325), (334,336), (333,323), (341,338), (340,314), (345,322), (350,340), (351,320), (342,9), (352,352), (344,329), (337,351), (348,348), (343,337), (353,354), (338,353), (347,361), (322,343), (312,360), (349,367), (356,364), (357,355), (362,347), (354,358), (359,349), (364,335), (363,345), (358,362), (367,342), (361,357), (360,368), (346,369), (366,372), (369,356), (368,324), (370,370), (377,380), (388,381), (384,366), (385,376), (376,377), (373,363), (383,374), (372,350), (379,365), (381,344), (380,359), (389,373), (399,382), (386,371), (398,384), (382,383), (371,378), (365,385), (387,390), (374,386), (400,387), (390,8), (401,389), (391,388), (404,395), (395,397), (378,399), (393,403), (403,396), (394,406), (375,398), (392,394), (355,402), (396,392), (314,375), (271,407), (411,408), (407,391), (412,404), (406,334), (414,405), (410,379), (415,416), (417,393), (402,7), (418,418), (420,401), (419,415), (421,400), (426,417), (413,424), (424,423), (397,427), (425,426), (430,419), (428,432), (432,413), (433,431), (434,414), (440,437), (443,420), (422,5), (444,439), (429,440), (446,441), (441,4), (447,442), (431,443), (452,447), (451,422), (459,465), (460,446), (461,463), (462,434), (468,468), (466,449), (465,430), (448,3)";
        //shiftUp(s);
        doMoves(s);
        generator.generateAllSolutions(this);
        System.out.println("solutions: " + generator.numberOfSolutions);
    }

    private void doit2() {
        setup(17);
        generator.generateAllSolutions(this);
        System.out.println("solutions: " + generator.numberOfSolutions);
    }

    public void doMoves(String s) {
        Point points[] = SolutionToPoinsConvertor.convertToPoints(s);
        for (Point point : points) {
            if (!generator.isValidMove(point)) {
                throw new RuntimeException("invalid move!");
            }
            generator.doMove(point);
        }
    }

    private void shiftUp(String s) {
        //we move everything two squares down and to the right, so we can circumvent the stuff
        Point points[] = SolutionToPoinsConvertor.convertToPoints(s);
        int delta = 3;
        for (int i=0; i<points.length; i++) {
            points[i] = new Point(points[i].x + delta, points[i].y + delta);
        }
        System.out.println(Arrays.toString(points));
        System.exit(0);
    }

    private void setup(int max) {
        try {
            Point points[] = new Point[max];
            generator = new PolygonGenerator(max);
            addPoint(points, 2, max);
            addPoint(points, 1, 1);

            int counter = 0;

            for (;;) {
                addPoint(points, max-counter, pointcounter);
                if (pointcounter >= max-2) {
                    break;
                }
                addPoint(points, pointcounter-counter, pointcounter);
                counter++;
            }
        } catch (RuntimeException e) {
            System.err.println("valid moves : " + pointcounter);
        }
    }


    private void addPoint(Point[] points, int x, int y) {
        Point point = new Point(x - 1, y - 1);
        if (!generator.isValidMove(point)) {
            throw new RuntimeException("invalid move!");
        }
        generator.doMove(point);
        points[pointcounter] = point;
        pointcounter++;
    }
}
