import java.util.Arrays;

public class RedudantPoints {

    public static void main(String args[]) {
        String s = "(402,406), (6,409), (406,411), (3,410), (4,281), (2,3), (5,408), (266,407), (310,318), (243,302), (253,263), (238,270), (191,259), (209,284), (178,241), (213,308), (175,237), (136,195), (192,255), (207,236), (193,197), (121,193), (180,196), (138,174), (131,132), (120,128), (123,129), (130,131), (133,126), (132,133), (137,166), (140,143), (146,130), (154,102), (139,111), (135,116), (147,123), (105,127), (134,153), (115,137), (129,169), (106,167), (125,168), (112,134), (72,122), (110,85), (78,103), (40,135), (35,91), (14,97), (26,92), (8,72), (27,93), (41,64), (33,59), (7,26), (18,28), (29,24), (13,15), (23,22), (10,23), (21,21), (15,20), (12,13), (22,19), (16,12), (9,8), (17,11), (19,14), (28,7), (20,16), (37,18), (24,17), (30,25), (11,30), (25,47), (42,40), (51,29), (38,35), (31,34), (57,10), (34,32), (46,31), (74,9), (52,27), (49,38), (63,44), (55,37), (66,46), (47,39), (32,50), (61,65), (84,51), (71,42), (58,36), (70,41), (73,43), (96,48), (79,45), (94,53), (91,56), (98,52), (87,60), (101,63), (100,55), (99,33), (102,62), (95,71), (97,68), (90,61), (82,66), (89,74), (85,83), (103,78), (93,81), (83,86), (88,73), (81,67), (92,54), (86,49), (69,70), (80,77), (60,96), (67,88), (50,101), (56,75), (53,90), (54,95), (59,94), (76,80), (77,76), (45,57), (43,89), (44,58), (36,79), (39,115), (65,110), (48,104), (64,109), (62,98), (68,108), (111,84), (113,106), (126,69), (116,100), (127,118), (119,105), (114,107), (124,119), (118,120), (122,117), (109,114), (117,112), (107,99), (108,87), (75,121), (104,125), (128,124), (160,82), (151,113), (144,138), (153,142), (155,157), (152,144), (143,139), (145,148), (150,160), (142,141), (141,159), (148,170), (161,162), (156,161), (163,149), (158,155), (164,147), (159,158), (162,156), (167,152), (174,136), (170,165), (169,178), (171,151), (172,145), (166,163), (173,140), (157,173), (168,181), (181,183), (186,185), (183,177), (176,146), (182,171), (185,182), (179,150), (184,176), (188,190), (177,184), (149,175), (165,188), (187,194), (195,164), (198,154), (189,191), (194,198), (190,189), (196,202), (203,201), (202,192), (199,172), (204,200), (212,186), (205,199), (228,179), (197,207), (222,205), (206,203), (227,204), (223,215), (225,216), (230,225), (233,218), (237,187), (234,212), (244,180), (235,209), (232,223), (251,248), (249,243), (240,224), (254,234), (241,226), (255,252), (229,229), (246,242), (239,233), (224,220), (221,208), (217,221), (219,210), (214,206), (200,211), (208,238), (215,214), (211,231), (216,219), (210,235), (201,260), (247,265), (260,256), (242,251), (231,257), (218,261), (236,253), (220,258), (245,250), (226,240), (256,254), (263,244), (248,222), (252,227), (250,213), (264,246), (271,228), (259,262), (275,269), (298,275), (291,249), (282,232), (283,247), (281,230), (289,239), (296,266), (292,245), (297,268), (290,217), (299,279), (284,287), (288,294), (274,297), (285,290), (276,295), (273,289), (269,286), (277,288), (278,291), (287,283), (294,277), (279,282), (265,271), (270,293), (262,267), (280,280), (295,276), (272,273), (286,274), (257,264), (258,298), (267,305), (300,306), (261,296), (293,303), (306,300), (303,278), (304,299), (302,272), (307,301), (318,285), (305,304), (316,292), (301,309), (317,312), (323,307), (321,316), (312,315), (320,314), (308,313), (314,324), (324,323), (322,327), (313,325), (326,330), (325,310), (328,329), (329,343), (336,338), (333,328), (332,336), (327,322), (331,333), (330,320), (338,335), (337,311), (342,319), (347,337), (348,317), (339,6), (349,349), (341,326), (334,348), (345,345), (340,334), (350,351), (335,350), (344,358), (319,340), (309,357), (346,364), (353,361), (354,352), (359,344), (351,355), (356,346), (361,332), (360,342), (355,359), (364,339), (358,354), (357,365), (343,366), (363,369), (366,353), (365,321), (367,367), (374,377), (385,378), (381,363), (382,373), (373,374), (370,360), (380,371), (369,347), (376,362), (378,341), (377,356), (386,370), (396,379), (383,368), (395,381), (379,380), (368,375), (362,382), (384,387), (371,383), (397,384), (387,5), (398,386), (388,385), (401,392), (392,394), (375,396), (390,400), (400,393), (391,403), (372,395), (389,391), (352,399), (393,389), (311,372), (268,404), (404,405), (403,388), (408,401), (407,376), (411,402), (399,4), (409,331), (412,415), (415,398), (414,412), (416,397), (417,413), (418,390), (405,2), (419,417), (410,1), (420,420), (315,418), (1,414), (394,419), (413,416)";
        final Point points[] = SolutionToPoinsConvertor.convertToPoints(s);

        for (int i=0; i<points.length; i++) {
            Point points2[] = copyWithout(points, i);
            double area = getArea(points2);
            if (area > 0) {
                System.out.println(points2.length + " " + i + " " + area/2 +  " " + Arrays.toString(points2));
            }
        }
    }

    private static Point[] copyWithout(Point points[], int toDelete) {
        Point toRemove = points[toDelete];
        Point points2[] = new Point[points.length - 1];
        int foundIndex = 0;
        for (int currentIndex=0; currentIndex<points.length; currentIndex++) {
            if (currentIndex != toDelete) {
                int x = points[currentIndex].x;
                int y = points[currentIndex].y;
                if (x >= toRemove.x) x--;
                if (y >= toRemove.y) y--;
                points2[foundIndex] = new Point(x, y);
                foundIndex++;
            }
        }
        return points2;
    }

    private static double getArea(Point points[]) {
        PolygonGenerator generator = new PolygonGenerator(points.length);
        generator.clear();

        for (Point point : points) {
            if (!generator.isValidMove(point)) {
                return -1;
            }
            generator.doMove(point);
        }

        return generator.getArea();
    }

}
